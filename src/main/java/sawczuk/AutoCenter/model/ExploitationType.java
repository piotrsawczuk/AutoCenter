package sawczuk.AutoCenter.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Entity
@Table(name = "exploitation_type")
public class ExploitationType {
    @Id
    @Column(name = "id")
    @GeneratedValue(generator = "exploitation_type_id_gen", strategy = GenerationType.SEQUENCE)
    @SequenceGenerator(name = "exploitation_type_id_gen", sequenceName = "exploitation_type_seq", initialValue = 1, allocationSize = 1)
    private Long id;
    @NotNull
    @Min(value = 0, message = "The value must be positive")
    @Column(name = "value")
    private Integer value;
    @NotNull
    @Column(name = "exploitation_type")
    private String exploitationType;

    @JsonBackReference
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "exploitationType")
    private List<Repair> repairs;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getValue() {
        return value;
    }

    public void setValue(ExploitationTypeEnum exploitationType) {
        this.value = exploitationType.getValue();
    }

    public String getExploitationType() {
        return exploitationType;
    }

    public void setExploitationType(ExploitationTypeEnum exploitationType) {
        this.exploitationType = exploitationType.name();
    }

    public List<Repair> getRepairs() {
        return repairs;
    }

    public void setRepairs(List<Repair> repairs) {
        this.repairs = repairs;
    }


    public enum ExploitationTypeEnum {
        Maintenance(1),
        Repair(2),
        Tuning(3);

        private final int value;
        private static Map map = new HashMap<>();

        ExploitationTypeEnum(int value) {
            this.value = value;
        }

        static {
            for (ExploitationTypeEnum exploitationType : ExploitationTypeEnum.values()) {
                map.put(exploitationType.value, exploitationType);
            }
        }

        public static ExploitationTypeEnum valueOf(int exploitationType) {
            return (ExploitationTypeEnum) map.get(exploitationType);
        }

        public int getValue() {
            return value;
        }
    }
}
