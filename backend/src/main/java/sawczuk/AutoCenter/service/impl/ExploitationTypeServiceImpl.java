package sawczuk.AutoCenter.service.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import sawczuk.AutoCenter.exception.ResourceNotFoundException;
import sawczuk.AutoCenter.model.ExploitationType;
import sawczuk.AutoCenter.model.dto.ExploitationTypeResponse;
import sawczuk.AutoCenter.repository.ExploitationTypeRepository;
import sawczuk.AutoCenter.service.ExploitationTypeService;
import sawczuk.AutoCenter.service.mapper.DtoEntityMapper;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ExploitationTypeServiceImpl implements ExploitationTypeService {

    private final ExploitationTypeRepository exploitationTypeRepository;

    @Override
    public ExploitationTypeResponse findByExploitationTypeIgnoreCase(String exploitationTypeName) throws ResourceNotFoundException {
        ExploitationType exploitationType = exploitationTypeRepository.findByExploitationTypeIgnoreCase(exploitationTypeName);
        if (exploitationType == null) {
            throw new ResourceNotFoundException("Exploitation type", "exploitationTypeName", exploitationTypeName);
        }
        return DtoEntityMapper.map(exploitationType, ExploitationTypeResponse.class);
    }

    @Override
    public ExploitationTypeResponse findByValue(Integer value) throws ResourceNotFoundException {
        ExploitationType exploitationType = exploitationTypeRepository.findByValue(value);
        if (exploitationType == null) {
            throw new ResourceNotFoundException("Exploitation type", "value", value);
        }
        return DtoEntityMapper.map(exploitationType, ExploitationTypeResponse.class);
    }

    @Override
    public List<ExploitationTypeResponse> findAll() throws ResourceNotFoundException {
        List<ExploitationType> exploitationTypeList = exploitationTypeRepository.findAll();
        if (exploitationTypeList == null || exploitationTypeList.isEmpty()) {
            throw new ResourceNotFoundException("Exploitation type list");
        }
        return DtoEntityMapper.mapAll(exploitationTypeList, ExploitationTypeResponse.class);
    }
}
